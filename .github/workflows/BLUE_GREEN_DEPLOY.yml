name: blue-green deploy
on:
  push:
    branches: [dev]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
      
      - name: 타임스탬프 생성
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Validate environment variables
        run: |
          if [ -z "${{ secrets.MYSQL_HOST }}" ]; then
            echo "Error: MYSQL_HOST is not set in GitHub Secrets"
            exit 1
          fi
          if [ -z "${{ secrets.MYSQL_PORT }}" ]; then
            echo "Error: MYSQL_PORT is not set in GitHub Secrets"
            exit 1
          fi
          if [ -z "${{ secrets.MYSQL_USER }}" ]; then
            echo "Error: MYSQL_USER is not set in GitHub Secrets"
            exit 1
          fi
          if [ -z "${{ secrets.MYSQL_PASSWORD }}" ]; then
            echo "Error: MYSQL_PASSWORD is not set in GitHub Secrets"
            exit 1
          fi
          if [ -z "${{ secrets.MYSQL_DATABASE }}" ]; then
            echo "Error: MYSQL_DATABASE is not set in GitHub Secrets"
            exit 1
          fi
          if [ -z "${{ secrets.DB_HOST }}" ]; then
            echo "Error: DB_HOST is not set in GitHub Secrets"
            exit 1
          fi

      - name: Set up environment variables
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{secrets.MYSQL_DATABASE }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env

      - name: SSH로 서버 접속 및 배포
        uses: appleboy/ssh-action@v0.1.6
        env:
            ENV_FILE_CONTENTS: ${{ secrets.ENV_FILE_CONTENTS }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          envs: ENV_FILE_CONTENTS
          script: |
            # SELinux 컨텍스트 설정
            if command -v semanage &> /dev/null; then
              sudo semanage fcontext -a -t httpd_sys_content_t "/var/www/app(/.*)?"
              sudo semanage fcontext -a -t httpd_sys_content_t "/var/www/app_backup_(.*)(/.*)?"
            fi

            
            # 배포 타임스탬프 가져오기
            TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
            echo "배포 시작. 타임스탬프: $TIMESTAMP"
            
            # Docker Compose 명령어 확인 및 설정
            DOCKER_COMPOSE_CMD="docker compose"
            
            # 기존 디렉토리 백업 및 새 코드 가져오기
            if [ -d "/var/www/app" ]; then
              sudo mv /var/www/app /var/www/app_backup_$TIMESTAMP
              sudo restorecon -R /var/www/app_backup_$TIMESTAMP
            fi
            
            # Git 저장소 클론
            sudo git clone https://github.com/${{ github.repository }} /var/www/app
            sudo restorecon -R /var/www/app
            cd /var/www/app

            echo "${{ secrets.ENV_FILE_CONTENTS }}" > .env

            # 필요한 권한 설정
            sudo chown -R $USER:$USER /var/www/app
            sudo chmod -R 755 /var/www/app
            
            # Docker 소켓 권한 확인
            if [ ! -w "/var/run/docker.sock" ]; then
              sudo chmod 666 /var/run/docker.sock
            fi
            
            # 현재 실행 중인 환경 확인
            CURRENT_ENV=$(docker ps --filter "name=nginx-blue" --format "{{.Names}}" | grep -q "nginx-blue" && echo "blue" || echo "green")
            if [ "$CURRENT_ENV" = "blue" ]; then
              NEW_ENV="green"
              CURRENT_COLOR="blue"
            else
              NEW_ENV="blue"
              CURRENT_COLOR="green"
            fi
            
            echo "현재 환경: $CURRENT_ENV"
            echo "새로운 환경: $NEW_ENV"
            
            # 새로운 환경의 docker-compose로 실행
            $DOCKER_COMPOSE_CMD -f Docker-compose.prod.$NEW_ENV.yml --env-file .env up -d
            
            # 헬스 체크 대기
            sleep 15


            # curl 설치 확인 및 헬스 체크
            if ! command -v curl &> /dev/null; then
              sudo dnf install -y curl
            fi
            
            # 헬스 체크
            NGINX_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health || echo "000")
            BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health || echo "000")
            
            if [ "$NGINX_HEALTH" = "200" ] && [ "$BACKEND_HEALTH" = "200" ]; then
              echo "새로운 환경이 정상적으로 실행되었습니다."
              
              # 이전 환경 종료
              if [ -n "$CURRENT_COLOR" ]; then
                $DOCKER_COMPOSE_CMD -f Docker-compose.prod.$CURRENT_COLOR.yml down
              fi
              
              echo "배포가 완료되었습니다."
              
              # 오래된 백업 정리 (7일 이상 된 백업 삭제)
              find /var/www -maxdepth 1 -name "app_backup_*" -type d -mtime +7 -exec sudo rm -rf {} \;
              
            else
              echo "새로운 환경 실행 실패. 롤백을 시작합니다."
              $DOCKER_COMPOSE_CMD -f Docker-compose.prod.$NEW_ENV.yml down
              
              # 롤백
              if [ -d "/var/www/app_backup_$TIMESTAMP" ]; then
                sudo rm -rf /var/www/app
                sudo mv /var/www/app_backup_$TIMESTAMP /var/www/app
                sudo restorecon -R /var/www/app
              fi
              echo "롤백이 완료되었습니다."
              exit 1
            fi
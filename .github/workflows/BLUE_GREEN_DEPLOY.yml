name: blue-green deploy

on:
  push:
    branches: [dev]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: 타임스탬프 생성
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: SSH로 서버 접속 및 배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            # 배포 타임스탬프 가져오기
            TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}

            echo "배포 시작. 타임스탬프: $TIMESTAMP"

            # 기존 디렉토리 백업 및 새 코드 가져오기
            if [ -d "/var/www/app" ]; then
              mv /var/www/app /var/www/app_backup_$TIMESTAMP
            fi
            git clone https://github.com/${{ github.repository }} /var/www/app

            cd /var/www/app

            # Docker Compose 실행 (배포할 환경 확인)
            CURRENT_ENV=$(docker ps --filter "name=nginx-blue" --format "{{.Names}}" | grep -q "nginx-blue" && echo "blue" || echo "green")

            if [ "$CURRENT_ENV" = "blue" ]; then
              NEW_ENV="green"
              CURRENT_COLOR="blue"
            else
              NEW_ENV="blue"
              CURRENT_COLOR="green"
            fi

            echo "현재 환경: $CURRENT_ENV"
            echo "새로운 환경: $NEW_ENV"

            # 새로운 환경의 docker-compose로 실행
            docker-compose -f docker-compose.prod.$NEW_ENV.yml --env-file .env up -d

            # 헬스 체크 대기
            sleep 15

            # 헬스 체크
            NGINX_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health)
            BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)

            if [ "$NGINX_HEALTH" = "200" ] && [ "$BACKEND_HEALTH" = "200" ]; then
              echo "새로운 환경이 정상적으로 실행되었습니다."

              # 이전 환경 종료
              if [ -n "$CURRENT_COLOR" ]; then
                docker-compose -f docker-compose.prod.$CURRENT_COLOR.yml down
              fi

              echo "배포가 완료되었습니다."
            else
              echo "새로운 환경 실행 실패. 롤백을 시작합니다."
              docker-compose -f docker-compose.prod.$NEW_ENV.yml down
              
              # 롤백
              if [ -d "/var/www/app_backup_$TIMESTAMP" ]; then
                rm -rf /var/www/app
                mv /var/www/app_backup_$TIMESTAMP /var/www/app
              fi

              exit 1
            fi
